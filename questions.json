{
  "Functions and Modules": [
    { "question": "How do you define a function in Python?", "options": ["function()","def myFunction():","create myFunction()","func myFunction()"], "correct": 1 },
    { "question": "Which keyword is used to import a module in Python?", "options": ["import", "include", "require", "using"], "correct": 0 },
    { "question": "What will the following code output? `print(abs(-10))`", "options": ["10", "-10", "None", "Error"], "correct": 0 },
    { "question": "What is the purpose of the `__name__` variable in Python?", "options": ["To define a function", "To check if a module is being run directly", "To call a constructor", "To store global variables"], "correct": 1 },
    { "question": "How can you pass a variable-length argument list to a function?", "options": ["*args", "args[]", "varargs", "arguments*"], "correct": 0 },
    { "question": "What is the output of `len([1, 2, 3])`?", "options": ["3", "2", "None", "Error"], "correct": 0 },
    { "question": "Which of these is a built-in function in Python?", "options": ["parse()", "open()", "inject()", "start()"], "correct": 1 },
    { "question": "Which of the following is used to create a module in Python?", "options": ["Creating a file with .py extension", "Using `import` statement", "defining `__main__` function", "Initializing a dictionary"], "correct": 0 },
    { "question": "What does the `lambda` keyword do?", "options": ["Creates a function", "Defines a variable", "Initializes a class", "Generates a random number"], "correct": 0 },
    { "question": "Which of the following statements is correct for defining a function with default parameters?", "options": ["def myFunc(x=5):", "def myFunc(x): default=5", "function myFunc(x=5)", "myFunc(x, default=5)"], "correct": 0 }
  ],
  "Object-Oriented Programming (OOP)": [
    { "question": "Which method is used to initialize an object in Python?", "options": ["__start__", "__init__", "__begin__", "__new__"], "correct": 1 },
    { "question": "What is inheritance in Python?", "options": ["A process where one class acquires the properties of another", "A way of initializing a class", "A mechanism for exception handling", "A function for variable-length arguments"], "correct": 0 },
    { "question": "Which of these methods is used for a string representation of an object?", "options": ["__print__", "__str__", "__repr__", "__str__ and __repr__"], "correct": 1 },
    { "question": "What is the output of the following code? `class Animal: def __init__(self, name): self.name = name`", "options": ["Error", "None", "An instance of Animal", "Class Animal created"], "correct": 2 },
    { "question": "What is polymorphism in Python?", "options": ["Multiple classes inheriting from one class", "Ability to take many forms", "Use of multiple inheritance", "A method overloading mechanism"], "correct": 1 },
    { "question": "Which of the following is an example of encapsulation in Python?", "options": ["Private variables", "Public methods", "Attributes with decorators", "Multiple inheritance"], "correct": 0 },
    { "question": "What does `super().__init__()` do?", "options": ["Calls the parent class constructor", "Creates a new instance of the class", "Defines a new method", "Prints the parent class details"], "correct": 0 },
    { "question": "Which of these is an example of abstraction?", "options": ["Hiding the complex implementation details and showing only the functionality", "Direct access to variables and methods", "Overloading methods", "Multiple classes inheriting from one base class"], "correct": 0 },
    { "question": "Which Python keyword is used to define a class?", "options": ["class", "def", "function", "object"], "correct": 0 },
    { "question": "What will be the output of the following code? `class Dog: def __init__(self, name): self.name = name; print(self.name)`", "options": ["Error", "None", "A string with the name", "Object of the class Dog"], "correct": 2 }
  ],
  "Error Handling": [
    { "question": "Which keyword is used to handle exceptions in Python?", "options": ["throw", "try", "catch", "except"], "correct": 1 },
    { "question": "What is the correct way to raise an exception in Python?", "options": ["raise Exception('Error')", "throw Exception('Error')", "raise 'Error'", "None of the above"], "correct": 0 },
    { "question": "Which block is used to execute code that may raise an exception?", "options": ["else", "finally", "try", "catch"], "correct": 2 },
    { "question": "How can you catch multiple exceptions in Python?", "options": ["Using multiple `except` blocks", "Using a tuple in `except`", "Using `try` only", "Using `else` only"], "correct": 1 },
    { "question": "What is the purpose of `finally` block in Python?", "options": ["To catch exceptions", "To execute code no matter what", "To define global variables", "To log errors"], "correct": 1 },
    { "question": "What will be the result of `try: 10/0 except ZeroDivisionError: pass`?", "options": ["ZeroDivisionError", "None", "Error is silently ignored", "Execution will continue with no error"], "correct": 2 },
    { "question": "How do you create a custom exception class in Python?", "options": ["class CustomError(Exception):", "raise CustomError()", "def CustomError():", "None of the above"], "correct": 0 },
    { "question": "What will the code `try: raise Exception('An error occurred') except Exception as e: print(e)` output?", "options": ["None", "An error occurred", "Exception", "Error occurred"], "correct": 1 },
    { "question": "What is the function used to get a stack trace in Python?", "options": ["traceback.format_exc()", "traceback.get_error()", "traceback.print_exc()", "traceback.stack()"], "correct": 0 },
    { "question": "Which of the following statements is true about the `raise` keyword?", "options": ["It can only raise built-in exceptions", "It can be used to raise custom exceptions", "It is only used for debugging", "It is used to skip an exception"], "correct": 1 }
  ],
  "Advanced Data Structures": [
    { "question": "Which of the following is a mutable data structure in Python?", "options": ["Tuple", "Set", "String", "Integer"], "correct": 1 },
    { "question": "What is the result of `my_dict = {1: 'a', 2: 'b'}; my_dict[3]`?", "options": ["KeyError", "None", "'b'", "'a'"], "correct": 0 },
    { "question": "How do you create a tuple in Python?", "options": ["(1, 2, 3)", "[1, 2, 3]", "{1, 2, 3}", "tuple(1, 2, 3)"], "correct": 0 },
    { "question": "Which method removes duplicates from a list in Python?", "options": ["remove_duplicates()", "unique()", "set()", "list.unique()"], "correct": 2 },
    { "question": "How can you check if a key exists in a dictionary?", "options": ["key in dictionary", "dictionary.contains(key)", "key.has_key()", "key.exists()"], "correct": 0 },
    { "question": "What is a set in Python?", "options": ["Ordered collection of items", "Unordered collection of unique items", "List with unique items", "A dictionary without values"], "correct": 1 },
    { "question": "What does the following list comprehension do? `[x**2 for x in range(5)]`", "options": ["Squares numbers from 1 to 5", "Squares numbers from 0 to 4", "Squares numbers from 1 to 4", "Returns squares of numbers less than 5"], "correct": 1 },
    { "question": "What is the output of `my_set = {1, 2, 3}; my_set.add(4)`?", "options": ["Error", "{1, 2, 3, 4}", "{1, 2, 3}", "{4}"], "correct": 1 },
    { "question": "What is the difference between `list` and `tuple` in Python?", "options": ["Lists are immutable; tuples are mutable", "Lists are mutable; tuples are immutable", "Both are mutable", "Both are immutable"], "correct": 1 },
    { "question": "How do you access the value of a specific key in a dictionary?", "options": ["my_dict[key]", "my_dict.key", "my_dict.get(key)", "Both 1 and 3"], "correct": 3 }
  ],
  "File Handling": [
    { "question": "Which method is used to read a file in Python?", "options": ["read()", "open()", "file()", "read_file()"], "correct": 0 },
    { "question": "What will be the result of `open('file.txt', 'r')` if the file doesn't exist?", "options": ["An empty file is created", "FileNotFoundError", "None", "It returns an empty string"], "correct": 1 },
    { "question": "Which mode is used to append data to an existing file in Python?", "options": ["'w'", "'r'", "'a'", "'x'"], "correct": 2 },
    { "question": "Which function is used to close a file after reading or writing in Python?", "options": ["close_file()", "file.close()", "file.close()", "close()"], "correct": 1 },
    { "question": "What does the `with` statement do when handling files?", "options": ["Opens a file without closing it", "Ensures a file is properly closed after reading/writing", "Handles exceptions in files", "None of the above"], "correct": 1 },
    { "question": "How do you write data to a file in Python?", "options": ["write(data)", "open(data)", "file.write(data)", "None of the above"], "correct": 2 },
    { "question": "What is the default mode for `open()` if no mode is specified?", "options": ["'w'", "'r'", "'a'", "'x'"], "correct": 1 },
    { "question": "What will happen if you try to open a file in write mode ('w') that does not exist?", "options": ["It throws an error", "Creates the file", "It returns None", "It opens a new file in read mode"], "correct": 1 },
    { "question": "How can you check if a file exists before attempting to open it?", "options": ["Using `os.path.exists()`", "Using `file.exists()`", "Using `os.open()`", "By opening the file in read mode"], "correct": 0 },
    { "question": "Which of these is the correct way to read all lines from a file in Python?", "options": ["file.read()", "file.readlines()", "file.get_lines()", "file.readlines_all()"], "correct": 1 }
  ],
  "Decorators and Generators": [
    { "question": "What is a Python decorator?", "options": ["A function that modifies the behavior of another function", "A generator that yields multiple values", "A method for creating static variables", "A function to create an abstract class"], "correct": 0 },
    { "question": "Which decorator is used to define a class method in Python?", "options": ["@staticmethod", "@classmethod", "@property", "@abstractmethod"], "correct": 1 },
    { "question": "What does the `yield` keyword do in a generator function?", "options": ["It returns a value and suspends execution", "It defines a static method", "It ends the function", "It is used to throw exceptions"], "correct": 0 },
    { "question": "Which of the following is the correct syntax for defining a generator function?", "options": ["def my_gen(): yield x", "def my_gen(): return x", "generator my_gen(): yield x", "None of the above"], "correct": 0 },
    { "question": "What is the purpose of the `@staticmethod` decorator?", "options": ["To define a method that doesn’t operate on an instance", "To define a method that works only with instances", "To define a class variable", "To create a function inside a class"], "correct": 0 },
    { "question": "How do you call a generator function?", "options": ["Simply by calling the function", "By calling next() on the generator object", "By using for-loop only", "Both 1 and 2"], "correct": 3 },
    { "question": "Which of the following will not work as a decorator in Python?", "options": ["@classmethod", "@staticmethod", "@property", "@abstractmethod"], "correct": 3 },
    { "question": "What will the code `def gen(): yield 1; yield 2` output if `next(gen())` is called twice?", "options": ["1, 2", "None", "1, 1", "2, 2"], "correct": 0 },
    { "question": "What is the result of `@property` decorator?", "options": ["It defines a property that can be accessed as an attribute", "It defines a class method", "It defines an abstract method", "None of the above"], "correct": 0 },
    { "question": "What is the difference between `@staticmethod` and `@classmethod`?", "options": ["@staticmethod does not take `self` as an argument; @classmethod takes `cls`", "@classmethod does not take `self` as an argument; @staticmethod takes `cls`", "There is no difference", "None of the above"], "correct": 0 }
  ],
  "Regular Expressions": [
    { "question": "Which module is used to work with regular expressions in Python?", "options": ["regex", "re", "reexp", "regexp"], "correct": 1 },
    { "question": "Which of the following is the correct syntax to find a match in Python using regular expressions?", "options": ["re.search('pattern', string)", "re.match('pattern', string)", "re.find('pattern', string)", "re.search(string, 'pattern')"], "correct": 0 },
    { "question": "What is the `.` (dot) metacharacter in regular expressions?", "options": ["Matches any character except a newline", "Matches only a space", "Matches digits", "Matches the start of a string"], "correct": 0 },
    { "question": "Which of the following regular expressions matches a word starting with 'A'?", "options": ["^A", "A$", "A*", "^A\\w+"], "correct": 3 },
    { "question": "What does the `re.findall()` method do?", "options": ["Returns the first match", "Returns all non-overlapping matches", "Finds a single match", "Finds matches and prints them"], "correct": 1 },
    { "question": "How do you match a digit in a regular expression?", "options": ["\\d", "\\D", "[0-9]", "Both 1 and 3"], "correct": 3 },
    { "question": "Which of the following is the correct way to use a regular expression to replace a string in Python?", "options": ["re.sub(pattern, replacement, string)", "re.replace(pattern, string)", "re.replace(string, pattern, replacement)", "re.replace(pattern, string, count)"], "correct": 0 },
    { "question": "What does `\\b` do in a regular expression?", "options": ["Matches a word boundary", "Matches a backslash", "Matches any non-word character", "Matches a space"], "correct": 0 },
    { "question": "Which of these characters is used to escape special characters in regular expressions?", "options": ["\\", "/", "_", ":"], "correct": 0 },
    { "question": "What will the regex `r'\\d{3}-\\d{2}-\\d{4}'` match?", "options": ["A US phone number", "A social security number", "A date", "An email address"], "correct": 1 }
  ],
  "NumPy and Pandas Basics": [
    { "question": "Which of the following is a fundamental package for numerical computing in Python?", "options": ["NumPy", "Pandas", "SciPy", "Matplotlib"], "correct": 0 },
    { "question": "How do you create a NumPy array from a Python list?", "options": ["numpy.array(list)", "list.numpy()", "np.array(list)", "array(list)"], "correct": 2 },
    { "question": "What does the `shape` attribute in a NumPy array represent?", "options": ["The total number of elements", "The number of dimensions", "The size of each dimension", "The data type of elements"], "correct": 2 },
    { "question": "Which of the following methods is used to read a CSV file in Pandas?", "options": ["pd.read_csv()", "pd.open_csv()", "pd.load_csv()", "pandas.read_csv()"], "correct": 0 },
    { "question": "What does the `head()` function do in Pandas?", "options": ["Displays the first few rows of a DataFrame", "Displays the column names", "Counts the rows of the DataFrame", "None of the above"], "correct": 0 },
    { "question": "How do you convert a Pandas DataFrame column to a NumPy array?", "options": ["df[column].to_numpy()", "df[column].array()", "df[column].convert()", "df[column].numpy()"], "correct": 0 },
    { "question": "Which function is used to generate a random array in NumPy?", "options": ["numpy.random()", "np.random.rand()", "np.random()", "random.array()"], "correct": 1 },
    { "question": "Which of the following is true about Pandas Series?", "options": ["It is like a DataFrame with a single column", "It is a list of numbers", "It can only hold strings", "It is equivalent to a NumPy array"], "correct": 0 },
    { "question": "How do you select a specific row in a Pandas DataFrame?", "options": ["df[0]", "df.iloc[0]", "df.select(0)", "df.row(0)"], "correct": 1 },
    { "question": "What does the NumPy function `np.zeros()` do?", "options": ["Creates an array of zeros", "Creates an array of ones", "Creates an empty array", "None of the above"], "correct": 0 }
  ],
  "Libraries and Frameworks": [
    { "question": "Which Python library is primarily used for data visualization?", "options": ["Matplotlib", "Pandas", "Flask", "Django"], "correct": 0 },
    { "question": "Which of the following is a Python framework used for web development?", "options": ["Flask", "NumPy", "Matplotlib", "Pandas"], "correct": 0 },
    { "question": "Which Python library would you use for machine learning?", "options": ["Pandas", "NumPy", "SciPy", "scikit-learn"], "correct": 3 },
    { "question": "Which of these is used to create interactive visualizations in Python?", "options": ["Plotly", "Flask", "TensorFlow", "scikit-learn"], "correct": 0 },
    { "question": "Which Python library is designed for scientific computing?", "options": ["NumPy", "Flask", "Matplotlib", "Pandas"], "correct": 0 },
    { "question": "Which of the following is NOT a Python web framework?", "options": ["Flask", "Django", "Matplotlib", "FastAPI"], "correct": 2 },
    { "question": "In which library would you typically use `DataFrame` structures?", "options": ["Pandas", "NumPy", "Matplotlib", "SciPy"], "correct": 0 },
    { "question": "Which of the following is used for deep learning in Python?", "options": ["TensorFlow", "Flask", "scikit-learn", "NumPy"], "correct": 0 },
    { "question": "Which Python library is used for statistical computations and data analysis?", "options": ["SciPy", "NumPy", "Pandas", "Django"], "correct": 0 },
    { "question": "Which of these libraries is commonly used to create web APIs in Python?", "options": ["Flask", "Pandas", "NumPy", "TensorFlow"], "correct": 0 }
  ],
  "Python Syntax and Grammar": [
    { "question": "Which of these is the correct way to declare a variable in Python?", "options": ["x = 5", "var x = 5", "int x = 5", "variable x = 5"], "correct": 0 },
    { "question": "What is the correct way to define a tuple in Python?", "options": ["(1, 2, 3)", "[1, 2, 3]", "{1, 2, 3}", "tuple(1, 2, 3)"], "correct": 0 },
    { "question": "What does the `*args` in a function definition do?", "options": ["It allows the function to accept multiple arguments", "It is used for default arguments", "It represents keyword arguments", "None of the above"], "correct": 0 },
    { "question": "Which of these Python statements is true?", "options": ["Indentation is optional in Python", "Python uses curly braces for code blocks", "Indentation is used to define code blocks", "Python requires semicolons to end statements"], "correct": 2 },
    { "question": "What is the correct way to comment out a block of code in Python?", "options": ["# Block comment", "/* Block comment */", "/* Block comment", "# Comment */"], "correct": 0 },
    { "question": "What will the following code output? `x = [1, 2, 3]; print(x[0:2])`", "options": ["[1, 2]", "[1, 3]", "[1, 2, 3]", "[0, 1]"], "correct": 0 },
    { "question": "What does the `is` keyword do in Python?", "options": ["Checks if two variables are equal", "Checks if two variables refer to the same object", "Assigns a value to a variable", "Checks for equality of values"], "correct": 1 },
    { "question": "Which of the following will raise a SyntaxError?", "options": ["if x == 10:", "for i in range(5):", "x = 10 +", "while True:"], "correct": 2 },
    { "question": "Which of these is the correct way to unpack a tuple?", "options": ["x, y = (1, 2)", "x, y = (1, 2, 3)", "x = (1, 2)", "x = [1, 2]"], "correct": 0 },
    { "question": "Which of these statements is a valid Python expression?", "options": ["x = 5 5", "x == 5", "x is 5", "x 5 == 5"], "correct": 1 }
  ],
  "Miscellaneous Concepts": [
    { "question": "What does GIL stand for in Python?", "options": ["Global Interpreter Lock", "Global Interface Library", "General Interpreter Lock", "Global Input Library"], "correct": 0 },
    { "question": "What is the latest major version of Python as of 2023?", "options": ["Python 3.9", "Python 3.10", "Python 3.11", "Python 4.0"], "correct": 2 },
    { "question": "What is the purpose of `PEP 8`?", "options": ["It defines the guidelines for Python code style", "It defines Python's memory management model", "It defines the official Python standard library", "It helps with the Python packaging system"], "correct": 0 },
    { "question": "Which of these is a popular Python virtual environment manager?", "options": ["pip", "virtualenv", "conda", "pyenv"], "correct": 1 },
    { "question": "How do you install a package using pip?", "options": ["pip install package_name", "pip install -r requirements.txt", "pip install package", "install package_name"], "correct": 0 },
    { "question": "What is the purpose of the `__main__` block in Python?", "options": ["To indicate the entry point of a Python script", "To define global variables", "To create an abstract base class", "To initialize a class"], "correct": 0 },
    { "question": "Which of the following is the correct way to define a virtual environment in Python?", "options": ["python -m venv venv_name", "virtualenv venv_name", "pyenv create venv_name", "python create venv_name"], "correct": 0 },
    { "question": "What will happen if you call `help()` in the Python interpreter?", "options":["Displays Python documentation", "Shows a list of all installed packages", "Exits the interpreter", "None of the above"], "correct": 0 },
    { "question": "What is the command to list all installed Python packages?", "options": ["pip list", "pip show", "python -m pip", "python -m list"], "correct": 0 },
    { "question": "What does the `__init__` method do in Python?", "options": ["It initializes an object", "It initializes a module", "It initializes a class", "It initializes the Python interpreter"], "correct": 0 }
  ]
}
