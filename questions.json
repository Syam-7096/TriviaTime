{
    "questions": [
      { "question": "What is Python?", "options": ["A snake", "A programming language", "A car", "An operating system"], "correct": 1 },
      { "question": "What is the output of: print(type(lambda x: x))?", "options": ["<class 'function'>", "<class 'lambda'>", "<class 'method'>", "Error"], "correct": 0 },
      { "question": "What does OOP stand for?", "options": ["Object-Oriented Programming", "Operational Output Process", "Overlapping Object Procedures", "Organized Operations Program"], "correct": 0 },
      { "question": "Which keyword is used to create a class in Python?", "options": ["def", "class", "function", "module"], "correct": 1 },
      { "question": "What is the correct file extension for Python files?", "options": [".pyth", ".pt", ".py", ".python"], "correct": 2 },
      { "question": "Which of the following is a mutable data type in Python?", "options": ["String", "Tuple", "List", "Integer"], "correct": 2 },
      { "question": "How do you define a function in Python?", "options": ["function()", "def myFunction():", "create myFunction()", "func myFunction()"], "correct": 1 },
      { "question": "Which operator is used for exponentiation in Python?", "options": ["^", "**", "//", "%"], "correct": 1 },
      { "question": "What is the output of `print(2 ** 3)` in Python?", "options": ["6", "8", "9", "Error"], "correct": 1 },
      { "question": "Which of these is NOT a Python keyword?", "options": ["lambda", "yield", "var", "global"], "correct": 2 },
      { "question": "Which Python library is used for data manipulation?", "options": ["NumPy", "Matplotlib", "Pandas", "Flask"], "correct": 2 },
      { "question": "What does the `self` keyword represent in a Python class?", "options": ["The class itself", "A variable", "The instance of the class", "A function"], "correct": 2 },
      { "question": "What is the purpose of the `__init__` method in Python?", "options": ["Initialize a class", "Define a variable", "Create a function", "Initialize an object"], "correct": 3 },
      { "question": "Which method is used to add an item to a list in Python?", "options": ["insert()", "add()", "push()", "append()"], "correct": 3 },
      { "question": "How do you comment a single line in Python?", "options": ["//", "#", "/* */", "!!"], "correct": 1 },
      { "question": "Which of the following is used to handle exceptions in Python?", "options": ["try-catch", "try-except", "error handling", "catch block"], "correct": 1 },
      { "question": "Which Python feature is used to iterate over items in a list?", "options": ["while loop", "if-else", "for loop", "switch-case"], "correct": 2 },
      { "question": "Which of these methods can be used to remove an element from a dictionary?", "options": ["del", "remove", "discard", "pop"], "correct": 0 },
      { "question": "What is the output of `type(3.14)`?", "options": ["int", "float", "double", "decimal"], "correct": 1 },
      { "question": "Which method is used to convert a string to lowercase in Python?", "options": ["toLowerCase()", "lower()", "casefold()", "tolower()"], "correct": 1 },
      { "question": "What does the `len()` function do?", "options": ["Calculates the length of a string or collection", "Finds the size of a file", "Returns the maximum value in a list", "Counts the number of occurrences of an item"], "correct": 0 },
      { "question": "Which Python module is used for regular expressions?", "options": ["regex", "re", "match", "expr"], "correct": 1 },
      { "question": "What is Python's method resolution order (MRO)?", "options": ["The order in which functions are called", "The order in which base classes are searched", "The order in which attributes are defined", "The order in which variables are declared"], "correct": 1 },
      { "question": "What is the purpose of `@staticmethod` in Python?", "options": ["To define a method that is bound to an instance", "To define a method that doesn't require an instance or class reference", "To define a method that can be called before class instantiation", "To define a method that can access only instance variables"], "correct": 1 },
      { "question": "Which of the following is used to declare a class variable in Python?", "options": ["self.variable", "class.variable", "variable", "static variable"], "correct": 1 },
      { "question": "What is the output of `bool([])` in Python?", "options": ["True", "False", "None", "Error"], "correct": 1 },
      { "question": "Which Python function is used to read a file line by line?", "options": ["read()", "readline()", "readlines()", "lines()"], "correct": 1 },
      { "question": "What is the difference between deep copy and shallow copy in Python?", "options": ["Deep copy copies the object, shallow copy copies the reference", "Deep copy creates a reference, shallow copy creates a new object", "Deep copy copies the reference, shallow copy copies the object", "Both are the same"], "correct": 0 },
      { "question": "What is the purpose of `__str__` method in Python classes?", "options": ["To represent the string version of the object for debugging", "To define how the object behaves when converted to string", "To represent a raw string without escape characters", "To create an immutable object"], "correct": 1 },
      { "question": "What is the purpose of `__repr__` method in Python classes?", "options": ["To define how the object behaves when converted to string", "To give a formal string representation of the object", "To create a unique identifier for the object", "To provide debugging information"], "correct": 1 },
      { "question": "Which of the following is a correct way to inherit a class in Python?", "options": ["class A(): pass", "class A(BaseClass): pass", "class A extends BaseClass: pass", "class A implements BaseClass: pass"], "correct": 1 },
      { "question": "What does the `super()` function do in Python?", "options": ["It refers to the superclass of the current class", "It is used to initialize a variable", "It refers to a superclass instance", "It is used to create static methods"], "correct": 0 },
      { "question": "What is the default value of `self` in Python class methods?", "options": ["It is automatically set to the class instance", "It needs to be manually passed as an argument", "It is the object reference that is passed automatically", "It has no default value"], "correct": 2 },
      { "question": "Which of these methods is used to check if an attribute exists in a class?", "options": ["hasattr()", "setattr()", "getattr()", "delattr()"], "correct": 0 },
      { "question": "Which Python feature is used to handle multiple classes in the same namespace?", "options": ["Inheritance", "Polymorphism", "Encapsulation", "Mixins"], "correct": 3 },
      { "question": "Which of the following is true about Python decorators?", "options": ["They are used to add functionality to functions or methods", "They are used to optimize function performance", "They are used to remove function attributes", "They are built-in methods for Python classes"], "correct": 0 },
      { "question": "What is the `lambda` function in Python?", "options": ["A function that can have multiple expressions", "A function that can have no parameters", "A function that is defined with the `lambda` keyword", "A function that doesn't return any value"], "correct": 2 },
      { "question": "Which of these data types is immutable in Python?", "options": ["List", "Dictionary", "Set", "Tuple"], "correct": 3 },
      { "question": "Which built-in function can be used to determine the type of an object in Python?", "options": ["type()", "object()", "isinstance()", "getattr()"], "correct": 0 },
      { "question": "What does the `yield` keyword do in Python?", "options": ["It returns a value from a generator function", "It defines a static method in a class", "It assigns a value to a global variable", "It is used to declare an exception"], "correct": 0 },
      { "question": "Which method would you use to remove the first occurrence of an item from a list?", "options": ["remove()", "pop()", "del()", "discard()"], "correct": 0 },
      { "question": "What does the `@classmethod` decorator do?", "options": ["It defines a method that operates on class variables", "It defines a method that operates on instance variables", "It defines a function inside a class", "It allows the method to be called before an object is created"], "correct": 0 },
      { "question": "How would you handle a `KeyError` exception in Python?", "options": ["Use a try-except block", "Use an if statement to check for keys", "Use `catch KeyError`", "Use `finally` block"], "correct": 0 },
      { "question": "In Python, how would you check if an object is an instance of a class?", "options": ["Using `isinstance()`", "Using `type()`", "Using `check()`", "Using `instanceof()`"], "correct": 0 }
    ]
}
  